# -*- coding: utf-8 -*-

import traceback
import json


####################################################################################################
def NormalizeURL(url):
    #if '&' in url:
    #    return url.split('&')[0]
    return url

####################################################################################################
def MetadataObjectForURL(url):
    try:
        item = GetItem(url)
        params = GetServiceParams(url)
        video = GetVideoFromItem(item, params)

        title = item['title']
        thumb = item['posters']['medium']
        duration = 0
        if video:
            if video['title']:
                title = video['title']
            duration = int(video['duration'])*1000

            if video['thumbnail']:
                 thumb = video['thumbnail']

        clipParams = {
            'title': unicode(title),
            'duration': duration,
            'thumb': Resource.ContentsOfURLWithFallback(thumb, fallback='icon-default.png'),
            'art': Resource.ContentsOfURLWithFallback(item['posters']['medium'], fallback='icon-default.png'),
        }
        if item['type'] not in ['serial', 'docuserial']:
            clipParams['genres'] = [x['title'] for x in item['genres']]
            clipParams['year'] = int(item['year'])
            clipParams['countries'] = [x['title'] for x in item['countries']]
            clipParams['summary'] = item['plot']

        vco = VideoClipObject(**clipParams)
        try:
            vco.directors.clear()
            vco.roles.clear()
            for d in item['director'].split(','):
                vco.directors.add(d.strip())
            for a in item['cast'].split(','):
                role = li.roles.new()
                role.title = a.strip()
                role.role = "Актёр"
                vco.roles.add(li)
        except:
            pass

        return vco
    except Exception, e:
        return VideoClipObject(
            title = '<error>',
            summary = '<An error occurred while fetching metadata> %s' %e,
        )

####################################################################################################
def MediaObjectsForURL(url):
    mos = []
    params = GetServiceParams(url)
    item = GetItem(url)
    video = GetVideoFromItem(item, params)

    def normalize(qual):
        qual = str(qual)
        return int(qual.lower().replace('p', '').replace('3d', '1080'))

    def getStreamFile(files, quality):
        sf = None
        for f in files:
            if normalize(f['quality']) <= normalize(quality):
                sf = f
                break
            sf = f
        return sf

    streamType = 'hls' if Prefs['streamtype'] == 'hls' else 'http'
    if video:
        files = sorted(video['files'], key=lambda x: normalize(x['quality']), reverse=True)
        if Prefs['quality'] == 'Auto':
            for i in reversed(files):
                # monkey patching
                quality = normalize(i['quality'])
                mos.append(MediaObject(
                    parts = [PartObject(key=Callback(PlayVideo, url=i['url'][streamType], fmt=i['quality'], start_url=url))],
                    protocol=streamType,
                    container = Container.MP4,
                    video_codec = VideoCodec.H264,
                    video_resolution = quality,
                    audio_codec = AudioCodec.AAC,
                    audio_channels = 2,
                    optimized_for_streaming = True
                ))
        else:
            f = getStreamFile(files, Prefs['quality'])
            mos.append(MediaObject(
                parts = [PartObject(key=Callback(PlayVideo, url=f['url'][streamType], fmt=f['quality'], start_url=url))],
                protocol=streamType,
                container = Container.MP4,
                video_codec = VideoCodec.H264,
                video_resolution = normalize(f['quality']),
                audio_codec = AudioCodec.AAC,
                audio_channels = 2,
                optimized_for_streaming = True
            ))

    return mos

####################################################################################################
@indirect
def PlayVideo(url, fmt=None, start_url=""):
    try:
        #return Redirect(url)
        marktime(start_url)
        return IndirectResponse(VideoClipObject, key=url)

        # item = GetItem(url)
        # params = GetServiceParams(url)
        # video = GetVideoFromItem(item, params)
        # if video:
        #     for f in video['files']:
        #         url = f['url']
        #         break

        #     #return Redirect(url)
        #     return IndirectResponse(VideoClipObject, key=url)
        # raise
    except:
        Log.Exception("Couldn't find all the required info to play this video.")
        raise Ex.MediaNotAvailable

####################################################################################################
# Queue fix (PlayVideoIndirect was renamed to PlayVideo at one point)
PlayVideoIndirect = PlayVideo

def marktime(url):
    Log.Exception("URL: %s" % url)
    item = GetItem(url)
    params = GetServiceParams(url)
    video = GetVideoFromItem(item, params)

    token = url.split('#')[0].split('?')[1].split('=')[1]
    v = params['video'] if params.get('video') else params['episode']
    s = params['season'] if params.get('season') else 0
    response = HTTP.Request("https://api.service-kp.com/v1/watching/marktime?access_token=%s&id=%s&video=%s&season=%s&time=%s" % (token, item['id'], v, s, video['duration']), cacheTime=0)
    Log.Exception("DATA: %s" % response)


def GetServiceParams(url):
    params = {}
    if '#' in url:
        url = url.split('#')[1]
        for i in url.split('&'):
            if '=' in i:
                k, v = i.split('=')
                params[k] = v

    return params

####################################################################################################
def GetVideoFromItem(item, params):
    if params.get('video'):
        for idx, video in enumerate(item['videos']):
            if idx+1 == int(params['video']):
                return video
    if params.get('season') and params.get('episode'):
        for sidx, season in enumerate(item['seasons']):
            if season['number'] != int(params['season']):
                continue
            for eidx, episode in enumerate(season['episodes']):
                if eidx+1 == int(params['episode']):
                    return episode

####################################################################################################
def GetVideoFromUrl(url):
    item = GetItem(url)
    if item:
        params = GetServiceParams(url)
        video = GetVideoFromItem(item, params)
        return (item, video)
    return (None, None)

####################################################################################################
def GetItem(url):
    if '#' in url:
        url = url.split('#')[0]
    response = HTTP.Request(url, cacheTime=5)
    response = json.loads(str(response).decode('utf-8'))
    if response['status'] == 200:
        return response['item']
    return None

